@model IEnumerable<GroupProject.Code.Models.Podcast>
@{
    ViewData["Title"] = "My Subscriptions";
    var podcastEpisodes = ViewBag.PodcastEpisodes as Dictionary<int, List<GroupProject.Code.Models.Episode>>;
    var subscriptions = ViewBag.Subscriptions as List<GroupProject.Code.Models.Subscription>;
}

<div class="container my-4">
    <div class="text-center mb-5">
        <h1 class="fw-bold mb-2" style="color: var(--primary-red);">
            <i class="fas fa-bookmark me-2"></i>My Subscriptions
        </h1>
        <p class="lead text-muted">Manage your subscribed podcasts and catch up on new episodes</p>
    </div>

    @if (Model != null && Model.Any())
    {
        <!-- Subscribed Podcasts -->
        <div class="row g-4">
            @foreach (var podcast in Model)
            {
                var episodes = podcastEpisodes != null && podcastEpisodes.ContainsKey(podcast.PodcastID)
                    ? podcastEpisodes[podcast.PodcastID]
                    : new List<GroupProject.Code.Models.Episode>();
                
                var subscription = subscriptions?.FirstOrDefault(s => s.PodcastID == podcast.PodcastID);
                
                <div class="col-12">
                    <div class="card shadow-lg">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1 text-white">
                                    <i class="fas fa-podcast me-2"></i>@podcast.Title
                                </h4>
                                <p class="mb-0 text-light opacity-75">
                                    <i class="fas fa-user me-1"></i>by @podcast.CreatorID
                                    @if (subscription != null)
                                    {
                                        <span class="ms-3">
                                            <i class="fas fa-calendar me-1"></i>
                                            Subscribed: @subscription.SubscriptionDate.ToString("MMM dd, yyyy")
                                        </span>
                                    }
                                </p>
                            </div>
                            <div>
                                <span class="badge bg-success fs-6">
                                    <i class="fas fa-check-circle me-1"></i>Subscribed
                                </span>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-3">@podcast.Description</p>
                            
                            <!-- Latest Episodes -->
                            @if (episodes.Any())
                            {
                                <h5 class="mb-3">
                                    <i class="fas fa-clock me-2" style="color: var(--primary-red);"></i>
                                    Latest Episodes
                                    <span class="badge bg-danger ms-2">@episodes.Count</span>
                                </h5>
                                
                                <div class="list-group mb-3">
                                    @foreach (var episode in episodes.OrderByDescending(e => e.ReleaseDate).Take(3))
                                    {
                                        <div class="list-group-item" style="background-color: var(--dark-gray); border-color: var(--primary-red);">
                                            <div class="d-flex w-100 justify-content-between align-items-start mb-2">
                                                <div class="flex-grow-1">
                                                    <h6 class="mb-1 text-light">
                                                        <i class="fas fa-play-circle me-2" style="color: var(--primary-red);"></i>
                                                        @episode.Title
                                                    </h6>
                                                    <small class="text-muted">
                                                        <i class="fas fa-calendar me-1"></i>@episode.ReleaseDate.ToString("MMM dd, yyyy")
                                                        <span class="mx-2">•</span>
                                                        <i class="fas fa-clock me-1"></i>@episode.Duration.ToString(@"hh\:mm\:ss")
                                                        <span class="mx-2">•</span>
                                                        <i class="fas fa-eye me-1"></i><span data-episode-views="@episode.EpisodeID">@episode.NumberOfViews.ToString("N0") views</span>
                                                    </small>
                                                </div>
                                            </div>
                                            <div class="d-flex gap-2">
                                                <button class="btn btn-sm btn-primary" 
                                                        onclick="playEpisode(@episode.EpisodeID, '@episode.AudioFileURL', '@episode.Title', '@episode.Duration.ToString(@"hh\:mm\:ss")')">
                                                    <i class="fas fa-play"></i> Play
                                                </button>
                                                <a asp-controller="Episode" asp-action="Details" asp-route-id="@episode.EpisodeID" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-info-circle"></i> Details
                                                </a>
                                            </div>
                                        </div>
                                    }
                                </div>
                                
                                @if (episodes.Count > 3)
                                {
                                    <a asp-controller="Episode" asp-action="Browse" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-list me-1"></i>View All @episodes.Count Episodes
                                    </a>
                                }
                            }
                            else
                            {
                                <div class="alert" style="background-color: rgba(220, 53, 69, 0.1); border-color: var(--primary-red); color: var(--light-gray);">
                                    <i class="fas fa-info-circle me-2"></i>
                                    No episodes available yet. Check back soon!
                                </div>
                            }
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <a asp-controller="Episode" asp-action="Browse" class="btn btn-outline-primary">
                                <i class="fas fa-eye me-1"></i>View Full Podcast
                            </a>
                            <form asp-controller="Subscription" asp-action="Unsubscribe" method="post" class="d-inline"
                                  onsubmit="return confirm('Are you sure you want to unsubscribe from @podcast.Title?');">
                                <input type="hidden" name="podcastId" value="@podcast.PodcastID" />
                                <button type="submit" class="btn btn-outline-danger">
                                    <i class="fas fa-times me-1"></i>Unsubscribe
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <div class="card shadow-lg">
                <div class="card-body py-5">
                    <i class="fas fa-bookmark" style="font-size: 5rem; color: var(--primary-red); opacity: 0.3; margin-bottom: 2rem;"></i>
                    <h3 class="mb-3">No Subscriptions Yet</h3>
                    <p class="text-muted mb-4 lead">
                        You haven't subscribed to any podcasts yet. Start exploring to find content you love!
                    </p>
                    <a asp-controller="Episode" asp-action="Browse" class="btn btn-primary btn-lg">
                        <i class="fas fa-search me-2"></i>Browse Podcasts
                    </a>
                </div>
            </div>
        </div>
    }
</div>

<!-- Audio Player Modal (shared with Browse page) -->
<div class="modal fade" id="audioPlayerModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="background-color: var(--medium-gray); border: 2px solid var(--primary-red);">
            <div class="modal-header" style="border-bottom: 1px solid var(--primary-red);">
                <h5 class="modal-title text-light">
                    <i class="fas fa-podcast me-2" style="color: var(--primary-red);"></i>
                    <span id="modalEpisodeTitle">Now Playing</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <audio id="audioPlayer" controls style="width: 100%; margin-bottom: 15px;">
                    <source id="audioSource" src="" type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
                <div id="episodeInfo" class="text-muted small"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Track episode views - only once per session per episode
        function trackEpisodeView(episodeId) {
            const viewKey = `episode_viewed_${episodeId}`;
            if (sessionStorage.getItem(viewKey)) {
                console.log(`Episode ${episodeId} already viewed this session`);
                return;
            }

            sessionStorage.setItem(viewKey, 'true');

            fetch(`/Episode/TrackView/${episodeId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(`View tracked for episode ${episodeId}. New count: ${data.viewCount}`);
                    updateViewCountDisplay(episodeId, data.viewCount);
                }
            })
            .catch(error => {
                console.error('Error tracking view:', error);
            });
        }

        // Update view count display on the page
        function updateViewCountDisplay(episodeId, newCount) {
            const viewElements = document.querySelectorAll(`[data-episode-views="${episodeId}"]`);
            viewElements.forEach(element => {
                element.textContent = newCount.toLocaleString() + ' views';
            });
        }

        function playEpisode(episodeId, audioUrl, episodeTitle, duration) {
            // Track view when player opens
            trackEpisodeView(episodeId);

            // Set modal content
            document.getElementById('modalEpisodeTitle').textContent = episodeTitle;
            document.getElementById('audioSource').src = audioUrl;
            document.getElementById('episodeInfo').innerHTML = 
                `<p class="mb-1"><strong>Duration:</strong> ${duration}</p>
                 <p class="mb-0 text-muted small">Audio URL: ${audioUrl}</p>`;
            
            // Get audio player and load new source
            const audioPlayer = document.getElementById('audioPlayer');
            audioPlayer.load();
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('audioPlayerModal'));
            modal.show();
            
            // Auto-play when modal is shown
            document.getElementById('audioPlayerModal').addEventListener('shown.bs.modal', function () {
                audioPlayer.play().catch(error => {
                    console.log('Auto-play prevented:', error);
                });
            }, { once: true });

            // Track play count when audio actually starts playing
            audioPlayer.addEventListener('playing', function() {
                trackPlayCount(episodeId);
            }, { once: true });
        }

        // Track play count - only once per session per episode
        function trackPlayCount(episodeId) {
            const playKey = `episode_played_${episodeId}`;
            if (sessionStorage.getItem(playKey)) {
                console.log(`Episode ${episodeId} already played this session`);
                return;
            }

            sessionStorage.setItem(playKey, 'true');

            fetch('/Episode/TrackPlay', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ episodeId: episodeId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(`Play tracked for episode ${episodeId}`);
                }
            })
            .catch(error => {
                console.error('Error tracking play:', error);
            });
        }

        // Pause audio when modal is closed
        document.getElementById('audioPlayerModal').addEventListener('hidden.bs.modal', function () {
            const audioPlayer = document.getElementById('audioPlayer');
            audioPlayer.pause();
        });
    </script>
}
