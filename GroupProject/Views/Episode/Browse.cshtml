@model IEnumerable<GroupProject.Code.Models.Podcast>
@{
    ViewData["Title"] = "Browse Podcasts";
    var podcastEpisodes = ViewBag.PodcastEpisodes as Dictionary<int, List<GroupProject.Code.Models.Episode>>;
}

<div class="container my-4">
    <!-- Success/Info Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="fas fa-info-circle me-2"></i>@TempData["InfoMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="text-center mb-5">
        <h1 class="fw-bold mb-2" style="color: var(--primary-red);">
            <i class="fas fa-th-large me-2"></i>Browse Podcasts
        </h1>
        <p class="lead text-muted">Discover amazing podcasts and their latest episodes</p>
    </div>

    <!-- Search Bar -->
    <div class="row justify-content-center mb-4">
        <div class="col-lg-8">
            <form asp-controller="Episode" asp-action="Search" method="get">
                <div class="input-group input-group-lg">
                    <input type="text" name="searchTerm" class="form-control" placeholder="Search episodes by title, podcast, or host..." required />
                    <select name="searchType" class="form-select" style="max-width: 150px;">
                        <option value="all">All</option>
                        <option value="topic">By Topic</option>
                        <option value="host">By Host</option>
                    </select>
                    <button class="btn btn-primary" type="submit">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
            </form>
            <div class="text-center mt-2">
                <a asp-controller="Episode" asp-action="Popular" class="btn btn-sm btn-outline-danger">
                    <i class="fas fa-fire me-1"></i>View Most Popular Episodes
                </a>
            </div>
        </div>
    </div>

    <!-- Audio Player Modal -->
    <div class="modal fade" id="audioPlayerModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background-color: var(--medium-gray); border: 2px solid var(--primary-red);">
                <div class="modal-header" style="border-bottom: 1px solid var(--primary-red);">
                    <h5 class="modal-title text-light">
                        <i class="fas fa-podcast me-2" style="color: var(--primary-red);"></i>
                        <span id="modalEpisodeTitle">Now Playing</span>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <audio id="audioPlayer" controls style="width: 100%; margin-bottom: 15px;">
                        <source id="audioSource" src="" type="audio/mpeg">
                        Your browser does not support the audio element.
                    </audio>
                    <div id="episodeInfo" class="text-muted small"></div>
                </div>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="row g-4" id="podcastList">
            @foreach (var podcast in Model)
            {
                var episodes = podcastEpisodes != null && podcastEpisodes.ContainsKey(podcast.PodcastID) 
                    ? podcastEpisodes[podcast.PodcastID] 
                    : new List<GroupProject.Code.Models.Episode>();
                
                <div class="col-12 podcast-item" data-title="@podcast.Title.ToLower()">
                    <div class="card shadow-lg">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1 text-white">
                                    <i class="fas fa-podcast me-2"></i>@podcast.Title
                                </h4>
                                <p class="mb-0 text-light opacity-75">
                                    <i class="fas fa-user me-1"></i>by @podcast.CreatorID
                                </p>
                            </div>
                            <div class="text-end">
                                <small class="text-light">
                                    <i class="fas fa-calendar-alt me-1"></i>
                                    @podcast.CreatedDate.ToString("MMM dd, yyyy")
                                </small>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text text-muted mb-3">@podcast.Description</p>
                            
                            <!-- Episode List for this Podcast -->
                            <div class="episodes-section" id="episodes-@podcast.PodcastID">
                                <h5 class="mb-3">
                                    <i class="fas fa-list me-2" style="color: var(--primary-red);"></i>Episodes
                                    <span class="badge bg-danger ms-2">@episodes.Count</span>
                                </h5>
                                
                                @if (episodes.Any())
                                {
                                    <div class="list-group">
                                        @foreach (var episode in episodes.OrderByDescending(e => e.ReleaseDate).Take(5))
                                        {
                                            <div class="list-group-item mb-2" style="background-color: var(--dark-gray); border-color: var(--primary-red);">
                                                <div class="d-flex w-100 justify-content-between align-items-start mb-2">
                                                    <div class="flex-grow-1">
                                                        <h6 class="mb-1 text-light">
                                                            <i class="fas fa-play-circle me-2" style="color: var(--primary-red);"></i>
                                                            @episode.Title
                                                        </h6>
                                                        <small class="text-muted">
                                                            <i class="fas fa-calendar me-1"></i>@episode.ReleaseDate.ToString("MMM dd, yyyy")
                                                            <span class="mx-2">•</span>
                                                            <i class="fas fa-clock me-1"></i>@episode.Duration.ToString(@"hh\:mm\:ss")
                                                            <span class="mx-2">•</span>
                                                            <i class="fas fa-eye me-1"></i><span data-episode-views="@episode.EpisodeID">@episode.NumberOfViews.ToString("N0") views</span>
                                                        </small>
                                                    </div>
                                                </div>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-sm btn-primary" 
                                                            onclick="playEpisode(@episode.EpisodeID, '@episode.AudioFileURL', '@episode.Title', '@episode.Duration.ToString(@"hh\:mm\:ss")')">
                                                        <i class="fas fa-play"></i> Play
                                                    </button>
                                                    <a asp-controller="Episode" asp-action="Details" asp-route-id="@episode.EpisodeID" class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-info-circle"></i> Details
                                                    </a>
                                                    <a asp-controller="Comment" asp-action="Index" asp-route-episodeId="@episode.EpisodeID" class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-comment"></i> Comment
                                                    </a>
                                                </div>
                                            </div>
                                        }
                                        
                                        @if (episodes.Count > 5)
                                        {
                                            <div class="text-center mt-2">
                                                <button class="btn btn-sm btn-outline-primary" onclick="showAllEpisodes(@podcast.PodcastID)">
                                                    <i class="fas fa-chevron-down me-1"></i>Show @(episodes.Count - 5) More Episodes
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="alert" style="background-color: rgba(220, 53, 69, 0.1); border-color: var(--primary-red); color: var(--light-gray);">
                                        <i class="fas fa-info-circle me-2"></i>
                                        <strong>No episodes yet.</strong> This podcast hasn't released any episodes yet. Check back soon!
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                @if (episodes.Any())
                                {
                                    <button class="btn btn-outline-primary" onclick="toggleEpisodes(@podcast.PodcastID)">
                                        <i class="fas fa-chevron-up me-1"></i>Hide Episodes
                                    </button>
                                }
                                else
                                {
                                    <span class="text-muted">
                                        <i class="fas fa-clock me-1"></i>Coming Soon
                                    </span>
                                }
                                <form asp-controller="Subscription" asp-action="Create" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="PodcastID" value="@podcast.PodcastID" />
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-plus me-1"></i>Subscribe to Podcast
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="card shadow-lg">
                <div class="card-body py-5">
                    <i class="fas fa-podcast text-muted mb-3" style="font-size: 4rem; color: var(--primary-red) !important;"></i>
                    <h4 class="text-muted mb-3">No Podcasts Available Yet</h4>
                    <p class="text-muted mb-4">Check back soon for new content!</p>
                    @if (User.IsInRole("Podcaster") || User.IsInRole("Admin"))
                    {
                        <a asp-controller="Podcast" asp-action="Create" class="btn btn-primary btn-lg">
                            <i class="fas fa-plus me-2"></i>Create the First Podcast
                        </a>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        let currentAudio = null;

        function searchPodcasts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const podcastItems = document.querySelectorAll('.podcast-item');
            
            podcastItems.forEach(item => {
                const title = item.getAttribute('data-title');
                if (title.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Allow search on Enter key
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchPodcasts();
                }
            });
        }

        function toggleEpisodes(podcastId) {
            const episodesSection = document.getElementById('episodes-' + podcastId);
            const button = event.target.closest('button');
            const icon = button.querySelector('i');
            
            if (episodesSection.style.display === 'none') {
                episodesSection.style.display = 'block';
                button.innerHTML = '<i class="fas fa-chevron-up me-1"></i>Hide Episodes';
            } else {
                episodesSection.style.display = 'none';
                button.innerHTML = '<i class="fas fa-chevron-down me-1"></i>Show Episodes';
            }
        }

        function showAllEpisodes(podcastId) {
            // This would load all episodes via AJAX or redirect to full episode list
            alert('This would show all episodes for podcast ' + podcastId);
        }

        // Track episode views - only once per session per episode
        function trackEpisodeView(episodeId) {
            // Check if already viewed in this session
            const viewKey = `episode_viewed_${episodeId}`;
            if (sessionStorage.getItem(viewKey)) {
                console.log(`Episode ${episodeId} already viewed this session`);
                return; // Already tracked this session
            }

            // Mark as viewed in session
            sessionStorage.setItem(viewKey, 'true');

            // Send AJAX request to increment view count
            fetch(`/Episode/TrackView/${episodeId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(`View tracked for episode ${episodeId}. New count: ${data.viewCount}`);
                    // Update view count on page if element exists
                    updateViewCountDisplay(episodeId, data.viewCount);
                }
            })
            .catch(error => {
                console.error('Error tracking view:', error);
            });
        }

        // Update view count display on the page
        function updateViewCountDisplay(episodeId, newCount) {
            // Find all view count displays for this episode and update them
            const viewElements = document.querySelectorAll(`[data-episode-views="${episodeId}"]`);
            viewElements.forEach(element => {
                element.textContent = newCount.toLocaleString() + ' views';
            });
        }

        function playEpisode(episodeId, audioUrl, episodeTitle, duration) {
            // Track view when player opens
            trackEpisodeView(episodeId);

            // Set modal content
            document.getElementById('modalEpisodeTitle').textContent = episodeTitle;
            document.getElementById('audioSource').src = audioUrl;
            document.getElementById('episodeInfo').innerHTML = 
                `<p class="mb-1"><strong>Duration:</strong> ${duration}</p>
                 <p class="mb-0 text-muted small">Audio URL: ${audioUrl}</p>`;
            
            // Get audio player and load new source
            const audioPlayer = document.getElementById('audioPlayer');
            audioPlayer.load();
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('audioPlayerModal'));
            modal.show();
            
            // Auto-play when modal is shown
            document.getElementById('audioPlayerModal').addEventListener('shown.bs.modal', function () {
                audioPlayer.play().catch(error => {
                    console.log('Auto-play prevented:', error);
                });
            }, { once: true });

            // Track play count when audio actually starts playing
            audioPlayer.addEventListener('playing', function() {
                trackPlayCount(episodeId);
            }, { once: true });
        }

        // Track play count - only once per session per episode
        function trackPlayCount(episodeId) {
            const playKey = `episode_played_${episodeId}`;
            if (sessionStorage.getItem(playKey)) {
                console.log(`Episode ${episodeId} already played this session`);
                return;
            }

            sessionStorage.setItem(playKey, 'true');

            fetch(`/Episode/TrackPlay`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ episodeId: episodeId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(`Play tracked for episode ${episodeId}`);
                }
            })
            .catch(error => {
                console.error('Error tracking play:', error);
            });
        }

        // Pause audio when modal is closed
        document.getElementById('audioPlayerModal').addEventListener('hidden.bs.modal', function () {
            const audioPlayer = document.getElementById('audioPlayer');
            audioPlayer.pause();
        });
    </script>
}